# auth-server sub-chart override
authserver:
  config:
    selfUrl: https://rickandmortyapi-st-authserver    
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    allowedRedirectUrls: https://rickandmortyapi-st-angular
    identityService:
      connString: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Identity;User Id=sa;password=myPassw@rd"
    administrationService:
      connString: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
    saasService:
      connString: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  ingress:
    host: rickandmortyapi-st-authserver
  image:
    repository: mycompanyname/rickandmortyapi-app-authserver
    tag: latest

# identity-service sub-chart override
identity:
  config:
    selfUrl: https://rickandmortyapi-st-identity
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    connectionStrings:
      identityService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Identity;User Id=sa;password=myPassw@rd"
      administrationService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
      saasService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  identityServerClients: # Seeded Clients
    angularRootUrl: https://rickandmortyapi-st-angular/
    webRootUrl: https://rickandmortyapi-st-web/
    blazorRootUrl: https://rickandmortyapi-st-blazor/
    blazorServerRootUrl: https://rickandmortyapi-st-blazor-server/
    publicWebRootUrl: https://rickandmortyapi-st-public-web/
    webGatewayRootUrl: https://rickandmortyapi-st-gateway-web/
    publicWebGatewayRootUrl: https://rickandmortyapi-st-gateway-web-public/ 
  ingress:
    host: rickandmortyapi-st-identity
  image:
    repository: mycompanyname/rickandmortyapi-service-identity
    tag: latest

# administration-service sub-chart override
administration:
  config:
    selfUrl: https://rickandmortyapi-st-administration
    gatewayUrl: https://rickandmortyapi-st-gateway-internal/
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    connectionStrings:
      administrationService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
      saasService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"    
    authServer:
      authority: http://eshop-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  synchedCommunication: # Used for server-to-server (client-credentials) communication with identityService for user permissions
    authority: https://rickandmortyapi-st-authserver
  ingress:
    host: rickandmortyapi-st-administration
  image:
    repository: mycompanyname/rickandmortyapi-service-administration
    tag: latest

# saas-service sub-chart override
saas:
  config:
    selfUrl: https://rickandmortyapi-st-saas
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    connectionStrings:
      administrationService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
      saasService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  ingress:
    host: rickandmortyapi-st-saas
  image:
    repository: mycompanyname/rickandmortyapi-service-administration
    tag: latest  

# product-service sub-chart override
product:
  config:
    selfUrl: https://rickandmortyapi-st-product
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    connectionStrings:
      productService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_ProductService;User Id=sa;password=myPassw@rd"
      administrationService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
      saasService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  ingress:
    host: rickandmortyapi-st-product    
  image:
    repository: mycompanyname/rickandmortyapi-service-product
    tag: latest

# gateway-web sub-chart override
gateway-web:
  config:
    selfUrl: https://rickandmortyapi-st-gateway-web
    corsOrigins: https://rickandmortyapi-st-angular
    globalConfigurationBaseUrl: http://rickandmortyapi-st-gateway-web
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"  
    dotnetEnv: Staging
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  reRoutes:
    authserver:
      schema: http
      host: rickandmortyapi-st-authserver
      port: 80
    identityService:
      schema: # http
      host: rickandmortyapi-st-identity
      port: 80
    administrationService:
      schema: http
      host: rickandmortyapi-st-administration
      port: 80
    saasService:
      schema: # http
      host: rickandmortyapi-st-saas
      port: 80
    productService:
      schema: http
      host: rickandmortyapi-st-saas
      port: 80  
  ingress:
    host: rickandmortyapi-st-gateway-web
  image:
    repository: mycompanyname/rickandmortyapi-gateway-web
    tag: latest
    pullPolicy: IfNotPresent

# gateway-web-public sub-chart override
gateway-web-public:
  config:
    selfUrl: https://rickandmortyapi-st-gateway-web-public
    globalConfigurationBaseUrl: http://rickandmortyapi-st-gateway-web-public
    corsOrigins: https://rickandmortyapi-st-gateway-web,https://rickandmortyapi-st-gateway-web-public
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"  
    dotnetEnv: Staging 
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  reRoutes:
    identityService:
      schema: http
      host: rickandmortyapi-st-identity
      port: 80
    administrationService:
      schema: http
      host: rickandmortyapi-st-administration
      port: 80
    productService:
      schema: http
      host: rickandmortyapi-st-product
      port: 80  
  ingress:
    host: rickandmortyapi-st-gateway-web-public
    tlsSecret: rickandmortyapi-tls
  image:
    repository: mycompanyname/rickandmortyapi-gateway-web-public
    tag: latest
    pullPolicy: IfNotPresent

kibana:
  config:
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch:9200

# dbmigrator sub-chart override
dbmigrator:
  config:
    connectionStrings:
      identityService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Identity;User Id=sa;password=myPassw@rd"
      administrationService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Administration;User Id=sa;password=myPassw@rd"
      saasService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_Saas;User Id=sa;password=myPassw@rd"
      productService: "Server=rickandmortyapi-st-sqldb,1433;Database=RickAndMortyApi_ProductService;User Id=sa;password=myPassw@rd"
    dotnetEnv: Staging  
  identityServerClients: # Seeded Clients
    angularRootUrl: https://rickandmortyapi-st-angular/
    webRootUrl: https://rickandmortyapi-st-web/
    blazorRootUrl: https://rickandmortyapi-st-blazor/
    blazorServerRootUrl: https://rickandmortyapi-st-blazor-server/
    publicWebRootUrl: https://rickandmortyapi-st-public-web/
    webGatewayRootUrl: https://rickandmortyapi-st-gateway-web/
    publicWebGatewayRootUrl: https://rickandmortyapi-st-gateway-web-public/ 
  image:
    repository: mycompanyname/rickandmortyapi-db-migrator
    tag: latest
    pullPolicy: IfNotPresent  

# Public Web application sub-chart override
publicweb:
  config:
    selfUrl: https://rickandmortyapi-st-publicweb
    gatewayUrl: https://rickandmortyapi-st-gateway-web-public
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging 
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  ingress:
    host: rickandmortyapi-st-publicweb
    tlsSecret: rickandmortyapi-tls
  image:
    repository: mycompanyname/rickandmortyapi-app-publicweb
    tag: latest
    pullPolicy: IfNotPresent

# Web(MVC) backoffice application sub-chart override
web:
  config:
    selfUrl: https://rickandmortyapi-st-web
    gatewayUrl: https://rickandmortyapi-st-gateway-web
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
    dotnetEnv: Staging 
    redisHost: rickandmortyapi-st-redis
    rabbitmqHost: rickandmortyapi-st-rabbitmq
    elasticsearchUrl: http://rickandmortyapi-st-elasticsearch
  ingress:
    host: rickandmortyapi-st-web
    tlsSecret: rickandmortyapi-tls
  image:
    repository: mycompanyname/rickandmortyapi-app-web
    tag: latest
    pullPolicy: IfNotPresent

# Angular backoffice application sub-chart override
angular:
  config:
    selfUrl: https://rickandmortyapi-st-angular
    gatewayUrl: https://rickandmortyapi-st-gateway-web
    authServer:
      authority: http://rickandmortyapi-st-authserver
      requireHttpsMetadata: "false"
  ingress:
    host: rickandmortyapi-st-angular
    tlsSecret: rickandmortyapi-tls
  image:
    repository: mycompanyname/rickandmortyapi-app-angular
    tag: latest
    pullPolicy: IfNotPresent

# Default values for RickAndMortyApi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
